// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

model User {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  email    String  @db.VarChar(255)
  password String  @unique @db.VarChar(255)
  role     Role    @default(CUSTOMER)
  adress   String? @db.VarChar(255)

  orders  Order[]
  reviews Review[]
  carts   Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            Int     @id @default(autoincrement())
  name          String  @db.VarChar(255)
  description   String? @db.Text
  price         Float
  stockQuantity Int
  images        Image[]

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]
  reviews    Review[]
  cartItems  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  parentCategoryId Int?
  parentCategory   Category?  @relation("CategoryToParent", fields: [parentCategoryId], references: [id])
  subCategories    Category[] @relation("CategoryToParent")

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id  Int    @id @default(autoincrement())
  url String @db.VarChar(255)

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  status     OrderStatus @default(PENDING)
  totalPrice Float

  orderItems OrderItem[]
  payment    Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

model OrderItem {
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  paymentMethod PaymentMethod
  status        PaymentStatus
  amount        Float

  order Order @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

model Review {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id     Int @id @default(autoincrement())
  userId Int

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
